#!/usr/bin/env bash
# use latest bash for associative arrays
# ----------------------------------------------
# @giocaizzi (Â©2024)
# ----------------------------------------------
# Run flask and nextjs app in dev mode
#
# Args:
#   --quit: Quit the server and client
#   --public: Run on the network
#   --sdir: The server directory. Default: server
#   --cdir: The client directory. Default: client
#   --only-server: Run only the server
#   --only-client: Run only the client
#
# Uses the .env file for:
#   FLASK_APP: The flask app
#   RUN_DEV_SDIR: The server directory
#   RUN_DEV_CDIR: The client directory
#   PORT_SERVER: The port to run the server on
#   PORT_CLIENT: The port to run the client on
# ----------------------------------------------

# root dir
root=$(dirname "$0")

# if .env file exists, source it
if [ -f .env ]; then
    source .env
else
    echo ".env file not found! Using defaults."
fi

# Initialize variables
quit=false
host="127.0.0.1" # localhost
sdir="${RUN_DEV_SDIR:-"server"}"
cdir="${RUN_DEV_CDIR:-"client"}"
run_server=true
run_client=true

# Parse command-line arguments
# while case shift for long line (--arg value)
while (( "$#" )); do
  case "$1" in
    --quit)
      quit=true
      shift
      ;;
    --public)
      host="0.0.0.0" # public on the network
      shift
      ;;
    --sdir)
      sdir="$2"
      shift 2
      ;;
    --cdir)
      cdir="$2"
      shift 2
      ;;
    --only-server)
      run_client=false
      shift
      ;;
    --only-client)
      run_server=false
      shift
      ;;
    *)
      echo "Error - Invalid argument : $1"
      exit 1
      ;;
  esac
done

# only server and only client can't be true at the same time
if [ "$only_server" == true ] && [ "$only_client" == true ]; then
    echo "Error - only-server and only-client can't be true at the same time"
    exit 1
fi

check_directory() {
    local run_object=$1
    local dir=$2

    if [ $run_object == true ]; then
        if [ ! -d "$dir" ]; then
            echo "Error - Directory not found: $dir"
            exit 1
        fi
    fi
}
# check existance of the server and client directories
check_directory $run_server "$sdir"
check_directory $run_client "$cdir"


# Clean the ports
# everytime!
for port in $PORT_CLIENT $PORT_SERVER; do
  echo "Cleaning port $port..."
  # clean all processes on the port
  lsof -i tcp:$port | awk 'NR!=1 {print $2}' | xargs kill 
done


# if quitting stop here as we cleaned the ports
if [ "$quit" == true ]; then
    echo "Quitting client and server..."
    exit 0
fi



# Services

declare -A services
services["server"]="flask.sh"
services["client"]="next.sh"

start_service() {
  local service=$1
  local run_service=$2
  local port=$3
  local host=$4
  local prefix=$5

  if [ $run_service == true ]; then
    echo "Starting $service..."
    # if there is a screen named $service already running quit
    if screen -list | grep -q "$service"; then
        echo "  > $service is already running!"
        echo "  > Restarting $service..."
        screen -XS $service quit
    fi
    screen -dmS $service "$root/${services[$service]}" -h $host -p $port -d $prefix
    echo "$service started on port $port!"
  else 
    echo "Skipping $service"
  fi
}

# Start the server
# "fake" is a dummy argument, for some reason it's needed
# empty string does not work
start_service "server" $run_server $PORT_SERVER $host "fake"
# Start the client
start_service "client" $run_client $PORT_CLIENT $host $cdir